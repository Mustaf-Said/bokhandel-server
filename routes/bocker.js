import express from 'express';
import db from '../db.js';

const router = express.Router();

// üîπ GET /bocker ‚Äì H√§mta alla b√∂cker
router.get('/', async (req, res) => {
  try {
    const [rows] = await db.query('SELECT * FROM b√∂cker');
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üîπ POST /bocker ‚Äì L√§gg till ny bok
router.post('/', async (req, res) => {
  const { Titel, F√∂rfattare, Pris, LagerAntal } = req.body;

  if (!Titel || !F√∂rfattare || !Pris || LagerAntal == null) {
    return res.status(400).json({ error: 'Alla f√§lt m√•ste fyllas i.' });
  }

  try {
    const [result] = await db.query(
      'INSERT INTO b√∂cker (Titel, F√∂rfattare, Pris, LagerAntal) VALUES (?, ?, ?, ?)',
      [Titel, F√∂rfattare, Pris, LagerAntal]
    );
    res.status(201).json({ message: 'Bok tillagd', BokID: result.insertId });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üîÑ PUT /bocker/:id ‚Äì Uppdatera en bok
router.put('/:id', async (req, res) => {
  const { id } = req.params;
  const { Titel, F√∂rfattare, Pris, LagerAntal } = req.body;

  if (!Titel || !F√∂rfattare || !Pris || LagerAntal == null) {
    return res.status(400).json({ error: 'Alla f√§lt (Titel, F√∂rfattare, Pris, LagerAntal) m√•ste anges.' });
  }

  try {
    const [result] = await db.query(
      'UPDATE b√∂cker SET Titel = ?, F√∂rfattare = ?, Pris = ?, LagerAntal = ? WHERE BokID = ?',
      [Titel, F√∂rfattare, Pris, LagerAntal, id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Ingen bok hittades med det angivna ID:t.' });
    }

    res.json({ message: 'Boken uppdaterades' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

//  DELETE /bocker/:id ‚Äì Ta bort en bok
router.delete('/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const [result] = await db.query('DELETE FROM b√∂cker WHERE BokID = ?', [id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Ingen bok hittades med det angivna ID:t.' });
    }

    res.json({ message: 'Boken har tagits bort.' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



export default router;
