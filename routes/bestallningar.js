import express from 'express';
import db from '../db.js';

const router = express.Router();

// üîπ GET: H√§mta alla best√§llningar med boktitlar
router.get('/', async (req, res) => {
  try {
    const [rows] = await db.query(`
      SELECT k.KundID, k.Namn, b.Titel, bb.Antal, be.Datum
      FROM kunder k
      JOIN best√§llningar be ON k.KundID = be.KundID
      JOIN best√§llning_b√∂cker bb ON be.Best√§llningID = bb.Best√§llningID
      JOIN b√∂cker b ON bb.BokID = b.BokID
    `);

    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üîπ POST: Skapa ny best√§llning med b√∂cker
router.post('/', async (req, res) => {
  const { KundID, Datum, Bocker } = req.body;

  const conn = await db.getConnection();
  try {
    await conn.beginTransaction();

    // 1. Skapa best√§llning
    const [bestallningResult] = await conn.query(
      'INSERT INTO best√§llningar (KundID, Datum) VALUES (?, ?)',
      [KundID, Datum]
    );

    const Best√§llningID = bestallningResult.insertId;

    // 2. L√§gg till b√∂cker
    for (const bok of Bocker) {
      await conn.query(
        'INSERT INTO best√§llning_b√∂cker (Best√§llningID, BokID, Antal) VALUES (?, ?, ?)',
        [Best√§llningID, bok.BokID, bok.Antal]
      );
    }

    await conn.commit();
    res.status(201).json({ message: 'Best√§llning skapad', Best√§llningID });
  } catch (err) {
    await conn.rollback();
    res.status(500).json({ error: err.message });
  } finally {
    conn.release();
  }
});

export default router;

